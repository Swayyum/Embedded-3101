// 2023/05/06 - Lab 2
#include <stdint.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdio.h> // added to declare sprintf
#include "inc/hw_memmap.h" // needed for definition of UART5_BASE and UART7_BASE
#include "inc/hw_ints.h" // needed for INT_UART5 and INT_UART7
#include "driverlib/pin_map.h" // needed for GPIO_PA0_U0RX, GPIO_PA1_U0TX, GPIO_PE4_U5RX, GPIO_PE5_U5TX, GPIO_PE0_U7RX, GPIO_PE1_U7TX
// these are needed for the various TivaWare calls below
#include "driverlib/fpu.h"
#include "driverlib/sysctl.h"
#include "driverlib/interrupt.h"
#include "driverlib/gpio.h"
#include "driverlib/uart.h"
// these are libraries for the temps
#include <stdlib.h>
#include <time.h>
#include <string.h>

// ring buffer for UART7 data
#define BUFFER_SIZE 256
volatile uint8_t buffer[BUFFER_SIZE];
volatile uint32_t read_index = 0;
volatile uint32_t write_index = 0;

// variables for temperature averaging
volatile uint32_t sample_count = 0;
volatile uint32_t avg8_sum = 0;
volatile uint32_t avg_total_sum = 0;

// returns a random temperature (that represents the current temperature)
int currTemp(){
    time_t t;
    srand((unsigned) time(&t));
    return (rand() % 81) + 20;
}

// puts function for UART output
void uart_puts(uint32_t uart, char *cp){
    uint32_t UART_BASE = UART0_BASE + (uart << 12);
    while( *cp!='\0' ){
        UARTCharPut(UART_BASE,*cp++);
    }
}

// calculates and returns the average of the last 8 temperature samples
uint32_t calcAvg8(){
    if (sample_count < 8) {
        return 0;
    }
    return avg8_sum / 8;
}

// calculates and returns the average of all temperature samples
uint32_t calcAvgTotal(){
    return avg_total_sum / sample_count;
}

// UART7 interrupt handler
void uart7_handler(void){

    uint32_t status;
    char cc;
    status = UARTIntStatus(UART7_BASE, true);

    UARTIntClear(UART7_BASE, status);

    while( UARTCharsAvail(UART7_BASE) ){
        cc = UARTCharGet(UART7_BASE) ;
        if (cc == '<') { // start of new message
            write_index = 0;
            buffer[write_index++] = cc;
        } else if (write_index != 0) { // message in progress
            if (cc == '>') { // end of message
                buffer[write_index++] = cc;
                if (write_index >= 6 && buffer[1] == 't') { // valid message
                    // extract temperature value from message
                    char temp_str[6];
                    for ( i = 2; i < write_index - 1; i++) {
                        temp_str[i - 2] = buffer[i];
                    }
                    temp_str[write_index - 3] = '\0';
                    uint32_t temp_val = atoi(temp_str);

                    // update temperature averaging variables
                    sample_count++;
                    avg8_sum += temp_val;
                    avg_total_sum += temp_val;

                    // print current and average temperature on UART0
                    char output_str[50];
                    uint32_t curr_temp = currTemp();
                    uint32_t avg8_temp = calcAvg8();
                    uint32_t avg_total_temp = calcAvgTotal();
  sprintf(output_str, "Current Temp: %dF, Avg8: %dF, AvgTotal: %dF\n", curr_temp, avg8_temp, avg_total_temp);
                    uart_puts(0, output_str);
                }
            } else { // message in progress
                buffer[write_index++] = cc;
                if (write_index >= BUFFER_SIZE) { // error: message too long
                    write_index = 0;
                }
            }
        }
    }
}

int main(void) {

    // enable floating point unit
    FPUEnable();
    FPULazyStackingEnable();

    // configure system clock for 80 MHz
    SysCtlClockSet(SYSCTL_SYSDIV_2_5 | SYSCTL_USE_PLL | SYSCTL_XTAL_16MHZ | SYSCTL_OSC_MAIN);

    // configure UART0 on Port A to display the temperature samples
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    GPIOPinConfigure(GPIO_PA0_U0RX);
    GPIOPinConfigure(GPIO_PA1_U0TX);
    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);
    UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200, UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE);

    // configure UART5 on Port E for RS-232 protocol as transmitter
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART5);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
    GPIOPinConfigure(GPIO_PE4_U5RX);
    GPIOPinConfigure(GPIO_PE5_U5TX);
    GPIOPinTypeUART(GPIO_PORTE_BASE, GPIO_PIN_4 | GPIO_PIN_5);
    UARTConfigSetExpClk(UART5_BASE, SysCtlClockGet(), 9600, UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE);

    // configure UART7 on Port E for RS-232 protocol as receiver
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART7);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
    GPIOPinConfigure(GPIO_PE0_U7RX);
    GPIOPinConfigure(GPIO_PE1_U7TX);
    GPIOPinTypeUART(GPIO_PORTE_BASE, GPIO_PIN_0 | GPIO_PIN_1);
    UARTConfigSetExpClk(UART7_BASE, SysCtlClockGet(), 9600, UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE);

    // enable UART5 transmit and UART7 receive interrupts
    UARTIntEnable(UART5_BASE, UART_INT_TX);
    UARTIntEnable(UART7_BASE, UART_INT_RX | UART_INT_RT);
    IntEnable(INT_UART5);
    IntEnable(INT_UART7);

    // enable interrupts globally
    IntMasterEnable();

    // periodically send XML temperature message (one byte at a time) by UART5 to its transmitter
char xml_msg[] = "<t>%d</t>";
char temp_str[6];
while(1){
    uint32_t curr_temp = currTemp();
    sprintf(temp_str, "%d", curr_temp);
    char output_str[10];
    sprintf(output_str, xml_msg, curr_temp);
    for (int i = 0; i < strlen(output_str); i++) {
        while(!UARTSpaceAvail(UART5_BASE)); // wait until UART5 transmit buffer is not full
        UARTCharPut(UART5_BASE, output_str[i]); // send one byte at a time
    }
    SysCtlDelay(SysCtlClockGet() / 3); // delay for 1/3 second before sending next message
}
}
